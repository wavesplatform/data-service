// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`pairs daemon sql test fill table 1`] = `"insert into \\"pairs\\" with \\"pairs_cte\\" as (select \\"amount_asset_uid\\" as \\"amount_asset_uid\\", \\"price_asset_uid\\" as \\"price_asset_uid\\", (array_agg(e.price * 10 ^(-8 - p.decimals + a.decimals) ORDER BY e.tx_uid DESC)::numeric[])[1] as \\"last_price\\", (array_agg(e.price * 10 ^(-8 - p.decimals + a.decimals) ORDER BY e.tx_uid)::numeric[])[1] as \\"first_price\\", sum(e.amount * 10 ^(-a.decimals)) as \\"volume\\", sum(e.amount * 10 ^(-a.decimals) * e.price * 10 ^(-8 - p.decimals + a.decimals)) as \\"quote_volume\\", sum(e.amount * 10 ^(-a.decimals) * e.price * 10 ^(-8 - p.decimals + a.decimals))/ sum(e.amount * 10 ^(-a.decimals)) as \\"weighted_average_price\\", case when amount_asset_uid=0 then sum(e.amount * 10 ^(- a.decimals)) when price_asset_uid=0 then sum(e.amount * 10 ^(-a.decimals) * e.price * 10 ^(-8 - p.decimals + a.decimals)) end as \\"volume_waves\\", max(e.price * 10 ^(-8 - p.decimals + a.decimals)) as \\"high\\", min(e.price * 10 ^(-8 - p.decimals + a.decimals)) as \\"low\\", count(e.price) as \\"txs_count\\", \\"sender_uid\\" as \\"matcher_address_uid\\" from (select \\"t\\".\\"tx_uid\\" as \\"tx_uid\\", coalesce(t.amount_asset_uid, 0) as \\"amount_asset_uid\\", coalesce(t.price_asset_uid, 0) as \\"price_asset_uid\\", \\"t\\".\\"amount\\" as \\"amount\\", \\"t\\".\\"price\\" as \\"price\\", \\"t\\".\\"time_stamp\\" as \\"time_stamp\\", \\"t\\".\\"sender_uid\\" as \\"sender_uid\\" from \\"txs_7\\" as \\"t\\" where \\"t\\".\\"tx_uid\\" >= (select \\"uid\\" from \\"txs\\" where time_stamp >= now() - interval '1 day' limit 1) order by \\"t\\".\\"tx_uid\\" desc) as \\"e\\" left join \\"assets\\" as \\"a\\" on \\"e\\".\\"amount_asset_uid\\" = \\"a\\".\\"uid\\" left join \\"assets\\" as \\"p\\" on \\"e\\".\\"price_asset_uid\\" = \\"p\\".\\"uid\\" group by \\"amount_asset_uid\\", \\"price_asset_uid\\", \\"sender_uid\\") select \\"p\\".\\"amount_asset_uid\\", \\"p\\".\\"price_asset_uid\\", \\"p\\".\\"first_price\\", \\"p\\".\\"last_price\\", \\"p\\".\\"volume\\", coalesce(p.volume_waves, p.quote_volume / p1.weighted_average_price, p.quote_volume * p2.weighted_average_price) as \\"volume_waves\\", \\"p\\".\\"quote_volume\\", \\"p\\".\\"high\\", \\"p\\".\\"low\\", \\"p\\".\\"weighted_average_price\\", \\"p\\".\\"txs_count\\", \\"p\\".\\"matcher_address_uid\\" from \\"pairs_cte\\" as \\"p\\" left join \\"pairs_cte\\" as \\"p1\\" on p1.amount_asset_uid is null and \\"p1\\".\\"price_asset_uid\\" = \\"p\\".\\"price_asset_uid\\" and \\"p1\\".\\"matcher_address_uid\\" = \\"p\\".\\"matcher_address_uid\\" left join \\"pairs_cte\\" as \\"p2\\" on \\"p2\\".\\"amount_asset_uid\\" = \\"p\\".\\"amount_asset_uid\\" and p2.price_asset_uid is null and \\"p2\\".\\"matcher_address_uid\\" = \\"p\\".\\"matcher_address_uid\\""`;
