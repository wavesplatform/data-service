// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`candles daemon sql test calculate and insert all candles from other small candles 1`] = `"insert into \\"candles\\" select \\"undefined\\" as \\"candle_time\\", \\"amount_asset_uid\\" as \\"amount_asset_uid\\", \\"price_asset_uid\\" as \\"price_asset_uid\\", (select min(\\"low\\")) as \\"low\\", (select max(\\"high\\")) as \\"high\\", (select sum(\\"volume\\")) as \\"volume\\", (select sum(\\"quote_volume\\")) as \\"quote_volume\\", (select max(\\"max_height\\")) as \\"max_height\\", (select sum(\\"txs_count\\")) as \\"txs_count\\", (sum((weighted_average_price * volume)::numeric)::numeric / sum(volume)::numeric)::numeric as \\"weighted_average_price\\", (array_agg(open ORDER BY time_start)::numeric[])[1] as \\"open\\", (array_agg(close ORDER BY time_start DESC)::numeric[])[1] as \\"close\\", '300' as \\"interval\\", \\"matcher_address_uid\\" as \\"matcher_address_uid\\" from \\"candles\\" as \\"t\\" where \\"t\\".\\"interval\\" = 60 group by \\"candle_time\\", \\"amount_asset_uid\\", \\"price_asset_uid\\", \\"matcher_address_uid\\""`;

exports[`candles daemon sql test get last candle height 1`] = `"select \\"max_height\\" from \\"candles\\" as \\"t\\" order by \\"max_height\\" desc limit 1"`;

exports[`candles daemon sql test get last exchange tx height 1`] = `"select \\"height\\" from \\"txs_7\\" as \\"t\\" order by \\"height\\" desc limit 1"`;

exports[`candles daemon sql test insert all candles group by 1 minute 1`] = `"insert into \\"candles\\" with \\"e_cte\\" as (select \\"t\\".\\"tx_uid\\" as \\"tx_uid\\", \\"t\\".\\"amount_asset_uid\\" as \\"amount_asset_uid\\", \\"t\\".\\"price_asset_uid\\" as \\"price_asset_uid\\", \\"t\\".\\"sender_uid\\" as \\"sender_uid\\", \\"t\\".\\"height\\" as \\"height\\", \\"t\\".\\"candle_time\\" as \\"candle_time\\", t.amount * 10 ^(-a.decimals) as \\"amount\\", t.price * 10 ^(-8 - p.decimals + a.decimals) as \\"price\\" from (select \\"t\\".\\"tx_uid\\" as \\"tx_uid\\", coalesce(t.amount_asset_uid, 0) as \\"amount_asset_uid\\", coalesce(t.price_asset_uid, 0) as \\"price_asset_uid\\", \\"t\\".\\"sender_uid\\" as \\"sender_uid\\", \\"t\\".\\"height\\" as \\"height\\", date_trunc('minute', t.time_stamp) as \\"candle_time\\", \\"t\\".\\"amount\\" as \\"amount\\", \\"t\\".\\"price\\" as \\"price\\" from \\"txs_7\\" as \\"t\\") as \\"t\\" inner join \\"assets\\" as \\"a\\" on \\"a\\".\\"uid\\" = \\"t\\".\\"amount_asset_uid\\" inner join \\"assets\\" as \\"p\\" on \\"p\\".\\"uid\\" = \\"t\\".\\"price_asset_uid\\") select \\"e\\".\\"candle_time\\" as \\"time_start\\", \\"amount_asset_uid\\" as \\"amount_asset_uid\\", \\"price_asset_uid\\" as \\"price_asset_uid\\", (select min(\\"e\\".\\"price\\")) as \\"low\\", (select max(\\"e\\".\\"price\\")) as \\"high\\", (select sum(\\"e\\".\\"amount\\")) as \\"volume\\", sum(e.amount * e.price) as \\"quote_volume\\", (select max(\\"height\\")) as \\"max_height\\", (select count(\\"e\\".\\"price\\")) as \\"txs_count\\", sum((e.amount)::numeric * (e.price)::numeric)/sum((e.amount)::numeric) as \\"weighted_average_price\\", (array_agg(e.price ORDER BY e.candle_time)::numeric[])[1] as \\"open\\", (array_agg(e.price ORDER BY e.candle_time DESC)::numeric[])[1] as \\"close\\", '1m' as \\"interval\\", \\"e\\".\\"sender_uid\\" as \\"matcher_address_uid\\" from \\"e_cte\\" as \\"e\\" group by e.candle_time, e.amount_asset_uid, e.price_asset_uid, e.sender_uid"`;

exports[`candles daemon sql test insert or update array of candles 1`] = `"insert into \\"candles\\" as \\"t\\" (\\"amount_asset_uid\\", \\"close\\", \\"high\\", \\"interval\\", \\"low\\", \\"matcher_address_uid\\", \\"max_height\\", \\"open\\", \\"price_asset_uid\\", \\"quote_volume\\", \\"time_start\\", \\"txs_count\\", \\"volume\\", \\"weighted_average_price\\") values ('1', '80', '100', '1m', '1', '3', DEFAULT, '20', '2', '100.2', '1970-01-01 03:00:00.000', '22', '200.2', '2.1') on conflict (time_start, amount_asset_uid, price_asset_uid, matcher_address_uid, interval) do update set open=EXCLUDED.open, close=EXCLUDED.close, low=EXCLUDED.low, high=EXCLUDED.high, max_height=EXCLUDED.max_height, quote_volume=EXCLUDED.quote_volume, txs_count=EXCLUDED.txs_count, volume=EXCLUDED.volume, weighted_average_price=EXCLUDED.weighted_average_price"`;

exports[`candles daemon sql test insert or update candles empty 1`] = `";"`;

exports[`candles daemon sql test insert or update candles from height 1`] = `"insert into \\"candles\\" select \\"undefined\\" as \\"candle_time\\", \\"amount_asset_uid\\" as \\"amount_asset_uid\\", \\"price_asset_uid\\" as \\"price_asset_uid\\", (select min(\\"low\\")) as \\"low\\", (select max(\\"high\\")) as \\"high\\", (select sum(\\"volume\\")) as \\"volume\\", (select sum(\\"quote_volume\\")) as \\"quote_volume\\", (select max(\\"max_height\\")) as \\"max_height\\", (select sum(\\"txs_count\\")) as \\"txs_count\\", (sum((weighted_average_price * volume)::numeric)::numeric / sum(volume)::numeric)::numeric as \\"weighted_average_price\\", (array_agg(open ORDER BY time_start)::numeric[])[1] as \\"open\\", (array_agg(close ORDER BY time_start DESC)::numeric[])[1] as \\"close\\", '300' as \\"interval\\", \\"matcher_address_uid\\" as \\"matcher_address_uid\\" from \\"candles\\" where \\"interval\\" = 60 and time_start >= undefined group by \\"candle_time\\", \\"amount_asset_uid\\", \\"price_asset_uid\\", \\"matcher_address_uid\\" on conflict (time_start, amount_asset_uid, price_asset_uid, matcher_address_uid, interval) do update set open=EXCLUDED.open, close=EXCLUDED.close, low=EXCLUDED.low, high=EXCLUDED.high, max_height=EXCLUDED.max_height, quote_volume=EXCLUDED.quote_volume, txs_count=EXCLUDED.txs_count, volume=EXCLUDED.volume, weighted_average_price=EXCLUDED.weighted_average_price"`;

exports[`candles daemon sql test truncate table 1`] = `"truncate \\"candles\\" restart identity"`;
